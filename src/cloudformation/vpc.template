{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "VPC for flotilla",
  "Parameters": {
    "BastionInstanceType": {
      "Type": "String",
      "Default": "t2.nano",
      "Description": "Instance type for bastion instances."
    },
    "BastionAmi": {
      "Type": "AWS::EC2::Image::Id",
      "Description": "AMI for bastion instances."
    },
    "FlotillaEnvironment": {
      "Type": "String",
      "Default": "develop",
      "Description": "Name of environment. i.e. test, staging, production"
    },
    "FlotillaContainer": {
      "Type": "String",
      "Default": "pebbletech/flotilla",
      "Description": "Flotilla container version to use."
    },
    "Az01": {
      "Type": "AWS::EC2::AvailabilityZone::Name",
      "Description": "First AZ."
    },
    "NatPerAz": {
      "Description": "Create an NAT gateway in each AZ?",
      "Type": "String",
      "Default": "false",
      "AllowedValues": ["true", "false"]
    }
  },
  "Conditions": {
    "MultiAzNat": {
      "Fn::Equals": [
        {"Ref": "NatPerAz"},
        "true"
      ]
    }
  },
  "Resources": {
    "VPC": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": "192.168.0.0/16",
        "EnableDnsSupport": true,
        "EnableDnsHostnames": true,
        "Tags": [
          {
            "Key": "Name",
            "Value": {"Ref": "AWS::StackName"}
          }
        ]
      }
    },
    "InternetGateway": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": ["-", [{"Ref": "AWS::StackName"}, "igw"]]
            }
          }
        ]
      }
    },
    "AttachGateway": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": {"Ref": "VPC"},
        "InternetGatewayId": {"Ref": "InternetGateway"}
      }
    },
    "PublicSubnet01": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {"Ref": "VPC"},
        "CidrBlock": "192.168.1.0/24",
        "AvailabilityZone": {"Ref": "Az01"},
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": ["-", [{"Ref": "AWS::StackName"}, "Public01"]]
            }
          }
        ]
      }
    },
    "PublicRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {"Ref": "VPC"},
        "Tags": [
          {"Key": "Application", "Value": {"Ref": "AWS::StackName"}},
          {"Key": "Network", "Value": "Public"},
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": ["-", [{"Ref": "AWS::StackName"}, "Public0X"]]
            }
          }
        ]
      }
    },
    "PublicRoute": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {"Ref": "PublicRouteTable"},
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {"Ref": "InternetGateway"}
      }
    },
    "PublicSubnet01RouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {"Ref": "PublicSubnet01"},
        "RouteTableId": {"Ref": "PublicRouteTable"}
      }
    },
    "PrivateSubnet01": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {"Ref": "VPC"},
        "CidrBlock": "192.168.101.0/24",
        "AvailabilityZone": {"Ref": "Az01"},
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": ["-", [{"Ref": "AWS::StackName"}, "Private01"]]
            }
          },
          {
            "Key": "Network",
            "Value": "Private"
          }
        ]
      }
    },
    "PrivateRouteTable01": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {"Ref": "VPC"},
        "Tags": [
          {"Key": "Application", "Value": {"Ref": "AWS::StackName"}},
          {"Key": "Network", "Value": "Private"},
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": ["-", [{"Ref": "AWS::StackName"}, "Private01"]]
            }
          }
        ]
      }
    },
    "PrivateSubnet01RouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {"Ref": "PrivateSubnet01"},
        "RouteTableId": {"Ref": "PrivateRouteTable01"}
      }
    },
    "PrivateRouteTable01DefaultRoute": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {"Ref": "PrivateRouteTable01"},
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": {"Ref": "NatGateway01"}
      }
    },
    "BastionSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Bastion Security Group",
        "VpcId": {"Ref": "VPC"},
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": "0.0.0.0/0"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": {"Fn::Join": ["-", [{"Ref": "AWS::StackName"}, "bastion"]]}
          }
        ]
      }
    },
    "BastionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": ["ec2.amazonaws.com"]
              },
              "Action": ["sts:AssumeRole"]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "DescribeEC2Autoscaling",
            "PolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "ec2:Describe*",
                    "autoscaling:Describe*"
                  ],
                  "Resource": "*"
                }
              ]
            }
          },
          {
            "PolicyName": "FlotillaDynamo",
            "PolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:DescribeTable"
                  ],
                  "Resource": [
                    {
                      "Fn::Join": [
                        "", [
                          "arn:aws:dynamodb:",
                          {"Ref": "AWS::Region"},
                          ":",
                          {"Ref": "AWS::AccountId"},
                          ":table/flotilla-",
                          {"Ref": "FlotillaEnvironment"},
                          "-*"
                        ]
                      ]
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:GetItem"
                  ],
                  "Resource": {
                    "Fn::Join": [
                      "", [
                        "arn:aws:dynamodb:",
                        {"Ref": "AWS::Region"},
                        ":",
                        {"Ref": "AWS::AccountId"},
                        ":table/flotilla-",
                        {"Ref": "FlotillaEnvironment"},
                        "-regions"
                      ]
                    ]
                  }
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:Scan"
                  ],
                  "Resource": {
                    "Fn::Join": [
                      "", [
                        "arn:aws:dynamodb:",
                        {"Ref": "AWS::Region"},
                        ":",
                        {"Ref": "AWS::AccountId"},
                        ":table/flotilla-",
                        {"Ref": "FlotillaEnvironment"},
                        "-services"
                      ]
                    ]
                  }
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:BatchGetItem"
                  ],
                  "Resource": {
                    "Fn::Join": [
                      "", [
                        "arn:aws:dynamodb:",
                        {"Ref": "AWS::Region"},
                        ":",
                        {"Ref": "AWS::AccountId"},
                        ":table/flotilla-",
                        {"Ref": "FlotillaEnvironment"},
                        "-users"
                      ]
                    ]
                  }
                }
              ]
            }
          }
        ],
        "Path": "/"
      }
    },
    "BastionInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [
          {"Ref": "BastionRole"}
        ]
      }
    },
    "BastionLC": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "InstanceType": {"Ref": "BastionInstanceType"},
        "ImageId": {"Ref": "BastionAmi"},
        "SecurityGroups": [{"Ref": "BastionSecurityGroup"}],
        "AssociatePublicIpAddress": "true",
        "IamInstanceProfile": {"Ref": "BastionInstanceProfile"},
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "", [
                "#cloud-config", "\n",
                "\n",
                "users:", "\n",
                "  - name: _sshkeys", "\n",
                "    homedir: /var/empty", "\n",
                "    system: true", "\n",
                "    primary-group: \"docker\"", "\n",
                "    no-user-group: true", "\n",
                "    shell: /sbin/nologin", "\n",
                "\n",
                "write_files:", "\n",
                "  - path: /etc/ssh/sshd_config", "\n",
                "    permissions: 0600", "\n",
                "    owner: root:root", "\n",
                "    content: |", "\n",
                "      UsePrivilegeSeparation sandbox", "\n",
                "      Subsystem sftp internal-sftp", "\n",
                "      PermitRootLogin no", "\n",
                "      AllowUsers core", "\n",
                "      PasswordAuthentication no", "\n",
                "      ChallengeResponseAuthentication no", "\n",
                "      AuthorizedKeysCommand /bin/docker run --rm ",
                {"Ref": "FlotillaContainer"}, " keys -r ",
                {"Ref": "AWS::Region"}, " --environment ",
                {"Ref": "FlotillaEnvironment"},
                " --bastion\n",
                "      AuthorizedKeysCommandUser _sshkeys", "\n",
                "\n"
              ]
            ]
          }
        }
      }
    },
    "BastionASG": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "MinSize": 1,
        "MaxSize": 1,
        "DesiredCapacity": 1,
        "LaunchConfigurationName": {"Ref": "BastionLC"},
        "VPCZoneIdentifier": [
          {"Ref": "PublicSubnet01"}
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": ["-", [{"Ref": "AWS::StackName"}, "bastion"]]
            },
            "PropagateAtLaunch": true
          }
        ]
      }
    },
    "NatEip01": {
      "Type": "AWS::EC2::EIP",
      "Properties": {
        "Domain": "vpc"
      }
    },
    "NatGateway01": {
      "DependsOn": "AttachGateway",
      "Type": "AWS::EC2::NatGateway",
      "Properties": {
        "AllocationId": {"Fn::GetAtt": ["NatEip01", "AllocationId"]},
        "SubnetId": {"Ref": "PublicSubnet01"}
      }
    }
  },
  "Outputs": {
    "VpcId": {
      "Value": {"Ref": "VPC"}
    },
    "PublicSubnet01": {
      "Value": {"Ref": "PublicSubnet01"}
    },
    "PrivateSubnet01": {
      "Value": {"Ref": "PrivateSubnet01"}
    },
    "BastionSecurityGroup": {
      "Value": {"Ref": "BastionSecurityGroup"}
    },
    "NatEip01": {
      "Value": {"Ref": "NatEip01"}
    }
  }
}